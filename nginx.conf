# /etc/nginx/sites-available/medepratlab
# Gère: medepratlab.com (front SPA) + api.medepratlab.com (proxy backend avec préfixe /api)

############################
# 1) HTTP -> HTTPS redirects
############################
server {
  listen 80;
  server_name medepratlab.com www.medepratlab.com;
  return 301 https://$host$request_uri;
}

server {
  listen 80;
  server_name api.medepratlab.com;
  return 301 https://$host$request_uri;
}

########################################
# 2) HTTPS: FRONT React SPA (root domain)
########################################
server {
  listen 443 ssl http2;
  server_name medepratlab.com www.medepratlab.com;

  root /var/www/medepratlab/client;
  index index.html;

  # --- SSL (Certbot) ---
  ssl_certificate     /etc/letsencrypt/live/medepratlab.com/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/medepratlab.com/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  # (Optionnel) en-têtes de sécurité
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header Referrer-Policy "no-referrer-when-downgrade" always;

  # React SPA fallback
  location / {
    try_files $uri $uri/ /index.html;
  }

  # Cache des assets statiques
  location ~* \.(?:js|css|png|jpg|jpeg|gif|svg|ico|woff2?)$ {
    expires 7d;
    access_log off;
    try_files $uri =404;
  }
}

########################################
# 3) HTTPS: API reverse proxy (subdomain)
########################################
server {
  listen 443 ssl http2;
  server_name api.medepratlab.com;

  # --- SSL (Certbot) ---
  ssl_certificate     /etc/letsencrypt/live/medepratlab.com/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/medepratlab.com/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  # Taille d'upload si besoin
  client_max_body_size 20m;


  # Proxy API qui CONSERVE le préfixe /api
  location /api/ {
    proxy_pass http://46.202.132.36:3052;   # conserve /api tel quel
    proxy_http_version 1.1;

    proxy_set_header Host               $host;
    proxy_set_header X-Real-IP          $remote_addr;
    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto  $scheme;

    # WebSocket (simple)
    proxy_set_header Upgrade    $http_upgrade;
    proxy_set_header Connection "upgrade";

    proxy_read_timeout 300;

    # Réponse immédiate aux preflights CORS (si ton backend ne gère pas OPTIONS)
    if ($request_method = OPTIONS) {
      add_header Access-Control-Allow-Origin "*" always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
      add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
      add_header Content-Length 0;
      add_header Content-Type text/plain;
      return 204;
    }
  }

  location /uploads/ {
  proxy_pass http://46.202.132.36:3052;   # keeps /uploads/... path
  proxy_http_version 1.1;

  proxy_set_header Host               $host;
  proxy_set_header X-Real-IP          $remote_addr;
  proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto  $scheme;

  # (optional) light caching headers
  expires 30d;
  add_header Cache-Control "public" always;

  # If you also serve images via range requests:
  proxy_set_header Range $http_range;
  proxy_set_header If-Range $http_if_range;
}

}
